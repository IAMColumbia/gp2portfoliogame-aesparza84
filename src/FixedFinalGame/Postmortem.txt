Patterns I have in my Game inlcude the Strategy and Flywiehgt pattern. Players and Enemies both are subclasses of the 
'Chracter' class, which is an 'ICharacter.' ICharacter has enums CharacterState, GroundState and LifeState. Every Chracter in the game has a Gravity, Health and Weapon. Each Chracter has an array of tiles that make up the game world so that they can detect collision. The Flywiehgt was used when making the TileMap for the world. I used to have the tiles as DrawableSprites but then that would mean a lot of textures being loaded when I only need 3 different ones. In the TileMap I made it so there is an array[5] Tiles that the createWorld() method would choose from and assign a new Empty tile. This way the tiles would inherit the properties from the tiles in the array and assign its texture from the existing ones rather than making 135 new spriteTextures.

My biggest mistake when starting this project was doing too much at the beginning. I had my idea laid out in my head and started off by making ALL the classes I thought I would need in the end. My first issue was with the camera but that was resolved quickly with Jeff's help. My second issue was with gravity it stuck around for while. A blunder I made was continuing to build the game around the gravity that didn't properly work. This meant that whatever collision I had wasn't correct. After continuing to build I was overwhelmed with how difficult it was to run through and find what was causing problems. Jeff helped me again with fixing the gravity, and from this point was like a restart for me. I deleted code from classes I wasn't concerned with at the time, such as the Weapon and ITool. I soon realized that having my MonoTiles built the way they were  would complicate the tilemap, so i remade it into a Tile class that has a texture and rectangle; No need to keep Updating it.

I would say the TileMap and 'Chracter' can be reused in other enviroments if they have the Tile, Camera and ICharacter class along as well. However then I'm not sure if that makes those classes specific to my game, but I can see myself reusing all these classes in other projects; no magic numbers or anything in them.

I can easily add more enemies and weapons to my game if I wanted to. Weapons right now take a Name and int Damage but damage is currently calculated by 'hitCount.' My way of dealing "damamge" to enemies and players isn't how I wanted it as I have NOT implemented a time delay when the PLayer attacks and blocks, so the user can spam attacks and hold block. Enemeis don't wield weapons and currently do damage as hitcount aswell when rectangle intersection occurs.

Overall, I did not finish my game and meet my orignal idea. Some technical debt I have is in the Game1 class where I manage the enemies. A lot of my classes contain MANNY bools which I didn't feel was right but worked. For example, in the Tile class I added a 'bool isEnSpawner' which if set to true in the contructor would be considered an enemy spawner. When the game starts it iterates through the TileMap and if the tile's enemy spawn bool is true, then a new Enemy is created and put at that Tile's location. The same is true for player spawn bool and for collidable bool. I would've made something along the lines of an enemy manager to spawn them rather than have the logic out in the Game1.
For weapons to work they are dependent on the Player in order to set their location before firing.
All Characters are dependent on haviong a map to check their own collision rather than a collision manager.

In the end, my biggest regret is not taking the small steps between each component. Doing so, I feel I could've done much more than what I have now.